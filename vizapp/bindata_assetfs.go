// Code generated by go-bindata.
// sources:
// index.tmpl
// config.json
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\xdd\x6e\xdb\xb8\x12\xbe\xae\x9f\x82\xe0\xb9\x91\x0a\x59\x8e\xed\x9c\x1b\xd7\x0e\xd0\xa6\x4d\x1b\x20\x69\x72\x9a\x9c\xee\x02\x81\x2f\x68\x91\xb1\x89\xa5\x45\x43\xa4\xfc\x13\xc3\x40\xdf\x75\x5f\x64\x87\x94\xa8\x1f\xcb\x4e\x52\x6c\xbb\xc0\x26\x22\x67\xe6\x9b\x5f\xce\x4c\xb3\xdd\x52\xf6\xc8\x63\x86\xb0\xe6\x5a\x30\xbc\xdb\xb5\xce\x85\xfa\xce\x9f\xd0\x47\xa2\x09\xfa\x90\xc8\x95\x62\x49\x6b\xbb\x65\x31\x05\x5a\xc9\xae\x38\x65\x13\x92\x18\x81\x21\x31\x07\x14\x09\xa2\xd4\x08\xcf\x09\x8f\xdb\x8e\x7a\xd6\x42\x68\xa8\x58\xa4\xb9\x8c\x1d\x43\x95\x06\xd4\x54\x20\x4e\x47\x58\x70\xa5\xf1\x1e\x4b\x7b\xce\xe2\x34\xe7\x03\x4e\xc1\x1d\x7d\xc6\x08\x65\x80\x70\x2e\x45\x3a\x8f\xd5\xb0\x23\x78\xc9\x45\x26\x4c\x20\xa5\x37\x82\x8d\x70\x24\x85\x4c\x06\xab\x19\xd7\x0c\x9f\xa1\x7b\x32\x11\x0c\xe5\x42\x08\xa4\x0c\x6b\x6e\x46\x27\xb5\x5f\xc3\x4e\x6e\xed\x59\x6b\xd8\xb1\x7e\x9d\x15\xce\x57\xbc\x9f\x48\xba\xc1\x36\x1e\x9a\xcd\x17\x82\xe8\xbd\x88\x50\xbe\x74\xb6\x46\x32\xd6\x2c\xd6\xed\x55\x42\x16\x0b\xb6\x17\x12\xe3\x79\xce\x80\xf7\x04\x5c\x7c\x6a\x50\xa2\x3d\xa7\xed\x6e\xaf\x8c\x49\x85\x3a\x91\x6b\x04\xff\xb7\x79\xfc\x28\xf1\x71\x11\x84\xfe\x97\xb2\x64\x33\x40\x43\x1e\x2f\x52\x6d\x4d\x98\x6f\xec\x37\x3e\x1b\x76\xec\x47\x01\xdf\x01\x7c\x17\xa0\xfc\xb3\x16\x21\x7b\x57\x0d\x42\x24\x13\x86\x51\x98\x45\xab\x11\x36\x70\xed\x91\x4f\x31\x82\xdb\x37\x0f\x68\x8b\xf0\x1a\x0f\xb6\x58\xe3\x01\xe6\x38\xc0\x4b\x38\x6c\xc3\x8c\x27\x54\x11\xd1\x9a\x25\xdd\x70\xbd\xdb\xed\x82\xc2\x76\xbc\x79\x59\x62\x53\x97\x78\x7a\x59\xe2\xa9\x2e\xb1\xbe\x8b\x88\x60\xf7\x9b\x05\x73\xa2\x0a\x44\x25\x1e\x3c\x40\x99\xc6\x0c\x72\x1c\x60\x21\xa7\xf0\x13\x00\xd8\x54\x26\x1b\x3c\x3e\x6a\xbe\x32\x58\x7b\x3e\xfc\x42\xfc\xcd\x01\xfc\xa7\x5f\x88\xff\xe4\xf0\x73\xf8\x5d\xf0\x9a\xb4\xf5\x7e\x3a\x6d\xbd\x9f\x4e\x5b\xef\xf7\xa5\xad\xf7\x9b\xd3\xd6\xfb\xcd\x69\xeb\x1d\x48\x5b\xfe\xb1\x35\x2d\x61\x2f\xb4\x27\xbb\x3a\x59\x19\x7a\x0d\x17\xfa\xda\x42\x48\x1d\x1a\x22\x30\x67\xc2\x31\x65\x6b\xfc\xa2\x28\xf4\x6a\x3d\x27\x8b\x83\xa2\x56\x72\x7c\xa8\x53\x2c\x48\xcc\xc4\x15\xd9\xc8\x54\x2b\x6c\xdb\x45\xa1\x45\xd8\xdb\x83\xc5\x9a\x91\x8c\x16\xdb\xfe\x4c\xe4\x4c\x47\x04\x50\x92\x0a\x0d\xce\x9a\x93\x92\x82\x53\x13\xb9\x6c\xe2\x0d\xf0\x5d\x26\x8e\x6e\xc1\x43\xe0\xb1\xaa\xf1\xc0\xfe\x52\x0f\x27\xe3\x8a\x83\x47\x55\xf7\x8e\xa9\xb6\xcd\xf8\xb5\xba\xba\xcf\xeb\x72\x49\x38\xa2\x6a\x45\x92\x98\xc7\xd3\xaa\xb6\x0f\x99\x04\xba\x96\x31\xd7\x32\x69\x28\xec\x3f\xaf\xd0\xa5\xee\x88\x42\x95\x46\x11\x83\x63\x45\xe1\x17\x90\xb8\x26\x8b\xa3\x0a\x4f\x8d\xc2\x37\x87\xb5\x4d\x19\xb0\xc0\x16\xf0\x13\xea\x3e\x83\x08\xba\x32\x9b\xc3\xbe\xa2\x9e\xf3\xec\x60\x75\xd9\x29\x65\xe6\xb4\x8a\x12\xbe\x80\x71\xe7\x3d\xa6\xb1\x1d\x6a\xde\x5d\x40\xfb\xfe\x16\x44\xef\x42\xad\x96\x1e\x06\xfb\xfe\xff\xed\x6a\xb7\xc3\x41\xc1\x42\x2d\x1d\xa1\xce\x5b\xc4\xc1\x4d\x34\x15\x72\x42\x04\x5a\x92\x04\xbd\xed\x58\x8a\xf9\xcc\xa6\xeb\x08\x51\x19\xa5\xb0\xc7\x68\xf0\x4f\x7f\x12\xcc\x7c\x7e\xd8\x5c\x52\xaf\x18\xba\xfe\xbb\x42\x06\x82\x0d\x12\xdb\x5d\x71\x41\xe0\x18\xb3\x15\x7a\xbf\x62\x4a\xc2\x8c\x65\x9a\x79\x56\x2a\x40\xdb\x3c\x71\x26\x64\x03\x44\x43\x6d\x96\x9b\xd0\xec\x6b\x21\xc0\x94\x0e\xb1\x80\xfb\xdb\xa2\xc9\x00\xe9\x81\x85\x11\x94\x75\xb8\x1c\x03\x38\x2f\x28\x09\xd3\x69\x12\x23\x47\x74\x7d\xc3\x6f\x65\xbf\x4a\x23\xad\x22\xe3\x58\xcb\x45\xc1\x64\xa0\x58\xab\x2a\x21\x88\x66\x24\xd1\x96\x38\x82\x70\xda\x53\x68\x77\x2e\xe5\xf9\x21\x85\xfd\x12\x42\x69\x99\x69\x3f\x54\x4c\xc0\x5a\xe1\xe1\xff\xd8\x45\xd0\x0f\xa1\x7d\x09\xaf\x00\xf0\x51\xa7\x73\x7f\xf3\xf1\x06\x5d\x5c\xfe\x89\x2c\x8b\x95\x2b\xe8\x61\x2a\x00\x12\x9e\x56\xe2\xe5\x45\x03\x45\x92\x30\xb6\xe4\x6c\x85\x1d\xc1\xee\x84\xa6\x7b\x56\x96\x42\xdf\x39\x71\xe8\xbf\x8a\x27\xb6\x44\x95\x49\x4e\x6d\xd9\xc9\xd6\x99\x70\x57\x66\x8c\x72\xb5\x20\x3a\x9a\x99\x00\xf5\x43\x77\x82\x6c\x93\x78\x63\xba\x79\x5c\xd5\x89\xac\x4f\xd7\xdf\xe1\x37\xfa\x78\x79\x77\xfb\xfe\xfe\xfc\xcb\xdf\x3f\x7e\xd4\x35\x27\x26\xd8\x95\xe2\x2b\x32\xef\xc0\xb3\x58\x59\xe8\x40\xcf\xb8\x0a\xf2\xa8\xee\x5a\x25\x0a\x70\x4c\x48\xf4\xd7\x11\x24\xfe\x88\x3c\x0a\xef\x10\xb6\xf8\xd1\x08\xe1\x84\x4d\x81\x01\x97\xf4\x86\xae\xcc\x9b\x4c\x99\xcd\xa4\xef\xea\xe5\x30\xe2\x5c\xa6\x8a\xc9\x25\xac\xbf\xcf\x80\x56\x1c\x38\x80\x99\x7b\x53\xc8\x80\x07\xb9\x19\x8d\x87\x99\x17\x86\xe9\x02\xf6\x41\xb8\x32\xab\x16\xda\x05\x9f\x42\x9d\x03\x87\x9f\xdf\xbc\x37\x26\x84\xa6\xd1\xd8\xe5\x3e\xaf\xc0\xa2\x9d\x84\xe9\x02\x6c\x62\x7e\x5d\x01\xbc\x94\x45\x22\x4d\x5b\x2a\x75\xe4\xa4\xee\x71\xd2\xe9\xbe\x59\xd0\x69\xf9\x74\xa6\x21\x62\x82\xc5\x53\x3d\x7b\x5b\x63\xfc\x92\x11\xfd\x82\x7b\xc5\xa9\x9e\x79\x25\x8f\x19\xad\x50\xfe\x0d\x59\xb8\xff\xc3\xb2\x16\xa2\x45\x1b\x0e\xbf\xc3\xcb\xb8\x85\x93\x57\x7d\x6a\x86\xe2\x1e\x7c\x33\xda\x36\x3f\xc7\x83\xdd\x1f\x87\x42\x12\xea\xd9\xfe\x10\xd0\xc0\x58\x15\x9c\x14\x2f\xf7\xfc\xe6\xeb\xc5\xe5\x67\x74\x71\xf3\x0d\xdd\x5d\x5e\xdf\x5e\x7d\x42\xd7\x37\x5f\x2f\xef\x6f\xbe\xd5\x4d\xeb\x1f\x35\xad\x5f\x9a\xd6\xaa\xb7\x18\xf3\x2e\xdd\x7e\xe0\xfa\x4c\x3e\x98\xcb\x46\x03\x69\x8e\xa9\xe7\x1e\x82\x1f\xfc\x4b\x7e\xd3\x83\x1a\xcc\xf0\x56\x1b\x8c\xf9\xd4\x06\xde\x2c\x6d\xff\x3d\x39\xf1\x5d\xbe\x7b\xe6\x1b\x18\x32\x4a\xf7\xa4\x21\x9c\x4f\xe0\x8a\x22\x9b\x6b\xf3\xa3\xa9\x73\x5c\x34\xe4\x47\xbe\x46\x2b\xae\x67\x30\x46\x91\xe1\x2d\x1e\x3d\x0a\x60\x9c\x30\x8a\xb4\x44\x13\x86\xf8\x1c\x2a\x74\x09\x47\x1e\xe7\xe1\xaf\x75\x6f\x23\x08\x81\x1d\xb7\xea\x49\xce\xef\x0f\x15\x42\x46\xa1\xef\xf6\xdb\x4f\x0e\x5e\xcd\x92\xbd\xb2\x33\x3f\x21\xa6\x77\x5b\x7c\xaf\x78\x56\x7e\xbe\x15\x78\x79\xe7\xb5\x57\x66\xda\x9a\xe2\xf0\x74\x92\x56\x03\xfd\x2c\x56\xb7\x89\xd5\x7d\x11\x0b\xda\xc0\x3e\x4e\xaf\x89\x03\x57\xaf\x34\xa2\xdf\x14\xee\xbf\x5a\xf8\xb4\x29\x7c\x3a\x2e\x72\xee\x62\x9c\x6d\x4d\xfb\x23\xaa\xb6\x47\xd7\x06\x15\xe0\xd8\xb1\x6c\x60\xfd\xe2\xf6\xc2\xde\x56\xe7\xb1\xfb\x73\x44\xbd\x4f\xf2\x08\xe6\x58\x56\x94\xb9\xe2\x0c\x03\xe4\x43\xe0\xb6\x0f\xc9\xfc\xbd\x03\x2a\x14\x53\xbe\xc4\xfb\xc3\xd9\xca\x97\x12\x6b\x6e\x1e\x48\xc2\xe6\x50\x8e\x5e\x79\x6f\x9f\x3f\x18\x98\xdd\xac\xe0\x9f\x0d\x72\x15\x12\x4a\x3f\x2d\x41\x87\x99\xfb\x26\x60\x1e\x26\xe5\x76\xd4\xce\x8c\x8c\xf2\x23\x0e\xca\x3a\x65\xe5\x1a\x74\x74\xf0\x98\xf5\xc8\xee\x57\xe1\x92\x88\x94\xb9\x8e\x03\x28\x44\x28\xdb\xfc\xa1\xfb\xec\x3c\x15\xcb\x95\xd9\x13\xfd\xd6\xb0\xe3\x56\x48\xb7\x66\xfe\x13\x00\x00\xff\xff\x79\x55\x37\x0d\x52\x13\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 4946, mode: os.FileMode(420), modTime: time.Unix(1493038755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8e\xcf\x6e\x83\x30\x0c\x87\xcf\xc9\x53\x4c\x3e\x07\x6d\x09\x62\x4c\x9c\x77\xdc\x69\xd2\x1e\xc0\x63\x59\x86\x94\x11\x14\xd2\xaa\x80\xfa\xee\x0d\x7f\x42\x51\x95\x56\xc0\xc5\xfe\x62\xfb\xf7\x0d\x14\xde\x53\x28\xe0\x98\x02\xa3\xf0\xf5\xf9\xe1\xeb\xe7\x1f\x74\x38\xb6\xa5\xa9\x7f\x2b\x05\xc5\xd3\x40\x09\x21\xd0\x96\xe8\x9c\xb4\x3c\x00\x02\x1a\x3b\x73\x70\xbe\x7f\x65\x33\x38\xf9\x7a\xfa\xf8\x02\xba\x00\xc4\x02\xfa\x00\xd6\x15\x7f\x56\x4b\x4f\x41\x57\xb5\x44\x0b\x61\xf3\x0e\xef\x57\xee\x75\xa4\x32\xb6\x83\xf1\xe1\xcc\xb6\x8e\x62\x8f\x63\x7e\xeb\xf8\xb6\xc3\xd1\xa8\x88\xe0\x15\x3e\xb6\x53\xb2\x96\xba\x6a\x5d\xc4\x4e\x6c\xc6\xfe\x24\xba\x7f\x6c\x22\x53\xd9\x12\x53\x1a\xdd\x4e\x92\x90\x27\x3c\xdd\x46\x7c\xa3\x6d\xb4\x89\x25\xc4\x77\x19\xcf\x12\xf1\x32\x5f\xa0\xfe\xbf\x04\x00\x00\xff\xff\x42\x1b\xdb\xd4\x11\x02\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 529, mode: os.FileMode(420), modTime: time.Unix(1493038755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
	"config.json": configJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
